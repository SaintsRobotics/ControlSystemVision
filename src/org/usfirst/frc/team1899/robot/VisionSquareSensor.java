package org.usfirst.frc.team1899.robot;

import java.util.ArrayList;
import java.util.List;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfPoint;
import org.opencv.core.Rect;
import org.opencv.imgproc.Imgproc;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;


/**
* VisionSquareSensor class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author GRIP
*/
public class VisionSquareSensor {

	//Outputs
	private Mat cvMedianblurOutput = new Mat();
	private Mat cvThresholdOutput = new Mat();
	private Mat cvLaplacianOutput = new Mat();
	private Mat cvCvtcolorOutput = new Mat();
	private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();
	private static final int IMG_WIDTH = 320;
	private static final int IMG_HEIGHT = 240;
	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	public Mat process(Mat source0) {
		// Step CV_medianBlur0:
		Mat cvMedianblurSrc = source0;
		double cvMedianblurKsize = 9.0;
		cvMedianblur(cvMedianblurSrc, cvMedianblurKsize, cvMedianblurOutput);

		// Step CV_Threshold0:
		Mat cvThresholdSrc = cvMedianblurOutput;
		double cvThresholdThresh = 251.0;
		double cvThresholdMaxval = 255.0;
		int cvThresholdType = Imgproc.THRESH_BINARY_INV;
		cvThreshold(cvThresholdSrc, cvThresholdThresh, cvThresholdMaxval, cvThresholdType, cvThresholdOutput);

		// Step CV_Laplacian0:
		Mat cvLaplacianSrc = cvThresholdOutput;
		double cvLaplacianKsize = 5.0;
		double cvLaplacianScale = 14.0;
		double cvLaplacianDelta = 1.0;
		int cvLaplacianBordertype = Core.BORDER_DEFAULT;
		cvLaplacian(cvLaplacianSrc, cvLaplacianKsize, cvLaplacianScale, cvLaplacianDelta, cvLaplacianBordertype, cvLaplacianOutput);

		// Step CV_cvtColor0:
		Mat cvCvtcolorSrc = cvLaplacianOutput;
		int cvCvtcolorCode = Imgproc.COLOR_BGR2GRAY;
		cvCvtcolor(cvCvtcolorSrc, cvCvtcolorCode, cvCvtcolorOutput);

		// Step Find_Contours0:
		Mat findContoursInput = cvCvtcolorOutput;
		boolean findContoursExternalOnly = false;
		findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);
		
//		for (MatOfPoint a : findContoursOutput) {
//			Rect r = Imgproc.boundingRect(a);
//			System.out.println(r.x + " " + r.y + " " + r.width + " " + r.height);
//		}
		
		return cvCvtcolorOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_medianBlur.
	 * @return Mat output from CV_medianBlur.
	 */
	public Mat cvMedianblurOutput() {
		return cvMedianblurOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_Threshold.
	 * @return Mat output from CV_Threshold.
	 */
	public Mat cvThresholdOutput() {
		return cvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_Laplacian.
	 * @return Mat output from CV_Laplacian.
	 */
	public Mat cvLaplacianOutput() {
		return cvLaplacianOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_cvtColor.
	 * @return Mat output from CV_cvtColor.
	 */
	public Mat cvCvtcolorOutput() {
		return cvCvtcolorOutput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Contours.
	 * @return ArrayList<MatOfPoint> output from Find_Contours.
	 */
	public ArrayList<MatOfPoint> findContoursOutput() {
		return findContoursOutput;
	}


	/**
	 * Performs a median blur on the image.
	 * @param src image to blur.
	 * @param kSize size of blur.
	 * @param dst output of blur.
	 */
	private void cvMedianblur(Mat src, double kSize, Mat dst) {
		Imgproc.medianBlur(src, dst, (int)kSize);
	}

	/**
	 * Apply a fixed-level threshold to each array element in an image.
	 * @param src Image to threshold.
	 * @param threshold threshold value.
	 * @param maxVal Maximum value for THRES_BINARY and THRES_BINARY_INV
	 * @param type Type of threshold to appy.
	 * @param dst output Image.
	 */
	private void cvThreshold(Mat src, double threshold, double maxVal, int type,
		Mat dst) {
		Imgproc.threshold(src, dst, threshold, maxVal, type);
	}

	/**
	 * Performs a Laplacian on the image.
	 * @param src Image to use Laplacian on.
	 * @param size Odd number that is size of the kernel.
	 * @param scale Scaling factor for Laplacian.
	 * @param delta offset for values in Laplacian.
	 * @param borderType pixel extrapolation method.
	 * @param dst Ouput of Laplacian. 
	 */
	private static void cvLaplacian(Mat src, double size, double scale, double delta,
		int borderType, Mat dst) {
		Imgproc.Laplacian(src, dst, 0, (int)size, scale, delta, borderType);
	}

	/**
	 * Converts an image from one color space to another.
	 * @param src Image to convert.
	 * @param code conversion code.
	 * @param dst converted Image.
	 */
	private void cvCvtcolor(Mat src, int code, Mat dst) {
		Imgproc.cvtColor(src, dst, code);
	}

	/**
	 * Sets the values of pixels in a binary image to their distance to the nearest black pixel.
	 * @param input The image on which to perform the Distance Transform.
	 * @param type The Transform.
	 * @param maskSize the size of the mask.
	 * @param output The image in which to store the output.
	 */
	private void findContours(Mat input, boolean externalOnly,
		List<MatOfPoint> contours) {
		Mat hierarchy = new Mat();
		contours.clear();
		int mode;
		if (externalOnly) {
			mode = Imgproc.RETR_EXTERNAL;
		}
		else {
			mode = Imgproc.RETR_LIST;
		}
		int method = Imgproc.CHAIN_APPROX_SIMPLE;
		Imgproc.findContours(input, contours, hierarchy, mode, method);
	}




}

